<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

chan adultOn;
chan childOn;
broadcast chan allDisembark;
broadcast chan offBoat[7];
broadcast chan onBoat[7];
int[0,1] boatL;
clock time;
typedef int[0,6] personType;
//{not a person, boy,dad,girl,mom,thief,police}
const personType NOT_A_PERSON = 6;
const personType BOY  = 0;
const personType DAD  = 1;
const personType GIRL  = 2;
const personType MOM  = 3;
const personType THIEF  = 4;
const personType POLICE  = 5;

const int DISEMBARK_TIME = 1;

int temp_sailtime = 0;

personType left[8] = {0,0,1,2,2,3,4,5};
personType right[8] = {NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON};
personType boat[8] = {NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON,NOT_A_PERSON};


int size(personType people[8])
{
	int count = 8;
	int i;
	for(i = 0 ; i &lt; 8 ; i++)
	{
		if(people[i] == NOT_A_PERSON)
		{
			count--;
		}
	}
	return count;
}

int contains(personType people[8], personType value)
{
	int count = 0;
	int i;
	for(i = 0 ; i &lt; 8 ; i++)
	{
		if(people[i] == value)
		{
			count++;
		}
	}
	
	return count;
}

bool parentConstraintViolated(personType people[8], personType parent, personType child)
{
	int size = size(people);
	if(size &gt; 3 || size == 1)
	{
		return false;
	}

	if(contains(people,parent)) 
	{
		int children = contains(people,child);
		if(children + 1 == size)
		{
			return true;
		}
	}

	return false;
}

bool momConstraintViolated(personType people[8])
{
	return parentConstraintViolated(people,MOM,BOY);
}

bool dadConstraintViolated(personType people[8])
{
	return parentConstraintViolated(people,DAD,GIRL);
}

bool thiefConstraintViolated(personType people[8])
{
	int size = size(people);
	if(size == 1)
	{
		return false;
	}
	
	if(contains(people,THIEF)) 
	{
		if(not contains(people,POLICE)) 
		{
			return true;
		}
	}
	return false;
}

bool verifyGroup(personType people[8])
{
	//Mom constraint
 	if(momConstraintViolated(people))
	{
		return false;
	}
 	if(dadConstraintViolated(people))
	{
		return false;
	}
 	if(thiefConstraintViolated(people))
	{
		return false;
	}
	return true;
}

bool verify()
{
	return verifyGroup(left) &amp;&amp; verifyGroup(right) &amp;&amp; verifyGroup(boat);
}







</declaration><template><name x="5" y="5">Boat</name><declaration>// Place local declarations here.
const int MAX_SAIL_TIME = 20;

clock x;
int sail_time = MAX_SAIL_TIME;


void set_sailtime (int adult_sailtime)
{
	if (sail_time &gt; adult_sailtime)
	{
		sail_time = adult_sailtime;
	}

}

</declaration><location id="id0" x="-104" y="112"><label kind="invariant" x="-168" y="128">x &lt;= DISEMBARK_TIME</label></location><location id="id1" x="128" y="-216"><label kind="invariant" x="64" y="-248">x &lt;= DISEMBARK_TIME</label></location><location id="id2" x="-336" y="112"><urgent/></location><location id="id3" x="-336" y="-96"><name x="-376" y="-112">still</name></location><location id="id4" x="128" y="112"><name x="152" y="120">sailing</name><label kind="invariant" x="152" y="136">x &lt;= sail_time</label></location><location id="id5" x="312" y="8"><urgent/></location><location id="id6" x="128" y="-96"><urgent/></location><init ref="id3"/><transition><source ref="id0"/><target ref="id2"/><label kind="guard" x="-272" y="72">x == DISEMBARK_TIME</label><label kind="assignment" x="-272" y="88">x = 0</label></transition><transition><source ref="id1"/><target ref="id3"/><label kind="guard" x="-160" y="-208">x == DISEMBARK_TIME</label><label kind="assignment" x="-160" y="-192">x = 0</label><nail x="-336" y="-216"/></transition><transition><source ref="id6"/><target ref="id1"/><label kind="synchronisation" x="136" y="-168">allDisembark!</label><label kind="assignment" x="136" y="-152">x = 0</label><nail x="128" y="-160"/></transition><transition><source ref="id5"/><target ref="id1"/><label kind="synchronisation" x="336" y="-256">allDisembark!</label><label kind="assignment" x="336" y="-240">x = 0</label><nail x="536" y="8"/><nail x="536" y="-216"/></transition><transition><source ref="id2"/><target ref="id4"/><label kind="assignment" x="-136" y="216">x = 0</label><nail x="-336" y="216"/><nail x="128" y="216"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="-528" y="0">verify()</label><label kind="assignment" x="-528" y="-16">sail_time := MAX_SAIL_TIME</label></transition><transition><source ref="id3"/><target ref="id6"/><label kind="synchronisation" x="-112" y="-88">adultOn?</label><label kind="assignment" x="-112" y="-72">set_sailtime(temp_sailtime), 
temp_sailtime := 0</label></transition><transition><source ref="id4"/><target ref="id0"/><label kind="guard" x="-16" y="56">x == sail_time</label><label kind="synchronisation" x="-16" y="40">allDisembark!</label><label kind="assignment" x="-16" y="72">boatL := 1-boatL,
x = 0</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="240" y="48">verify()</label><label kind="assignment" x="240" y="64">x = 0</label></transition><transition><source ref="id6"/><target ref="id4"/><label kind="guard" x="80" y="-32">verify()</label><label kind="assignment" x="80" y="-16">x = 0</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="336" y="-112">adultOn?</label><label kind="assignment" x="336" y="-96">set_sailtime(temp_sailtime), 
temp_sailtime := 0</label><nail x="312" y="-96"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="208" y="-72">childOn?</label></transition></template><template><name>Person</name><parameter>chan &amp;on, const personType type, int sail_time</parameter><declaration>int[0,1] L;</declaration><location id="id7" x="-544" y="32"><committed/></location><location id="id8" x="-536" y="-168"><committed/></location><location id="id9" x="-432" y="-80"><name x="-442" y="-110">onboat</name></location><location id="id10" x="-656" y="-80"><name x="-696" y="-96">still</name></location><init ref="id10"/><transition><source ref="id7"/><target ref="id10"/><label kind="synchronisation" x="-672" y="-8">offBoat[type]!</label><label kind="assignment" x="-680" y="-48">L:= 1- L</label></transition><transition><source ref="id10"/><target ref="id8"/><label kind="guard" x="-640" y="-168">L == boatL</label><label kind="synchronisation" x="-624" y="-184">on!</label><label kind="assignment" x="-752" y="-152">temp_sailtime := sail_time</label></transition><transition><source ref="id8"/><target ref="id9"/><label kind="synchronisation" x="-488" y="-152">onBoat[type]!</label></transition><transition><source ref="id9"/><target ref="id7"/><label kind="synchronisation" x="-456" y="-40">allDisembark?</label></transition></template><template><name>Observer</name><declaration>

void add(personType &amp;people[8], personType elem)
{
	int i;
	for(i = 0 ; i &lt; 8 ; i++)
	{
		if(people[i] == NOT_A_PERSON)
		{
			people[i] = elem;
			return;
		}
	}
	return;
}

void remove(personType &amp;people[8], personType elem)
{
	int i;
	for(i = 0 ; i &lt; 8 ; i++)
	{
		if(people[i] == elem)
		{
			people[i] = NOT_A_PERSON;
			return;
		}
	}
	return;
}

void updateOn(personType person)
{
	if(boatL == 0) // Left side
	{
		remove(left,person);
		add(boat,person);
	}
	else // Right
	{
		remove(right,person);
		add(boat,person);
	}
}

void updateOff(personType person)
{
	if(boatL == 0) // Left side
	{
		remove(boat,person);
		add(left,person);
	}
	else // Right
	{
		remove(boat,person);
		add(right,person);
	}
}</declaration><location id="id11" x="-288" y="0"></location><init ref="id11"/><transition><source ref="id11"/><target ref="id11"/><label kind="select" x="-232" y="64">e : personType</label><label kind="synchronisation" x="-176" y="-8">offBoat[e]?</label><label kind="assignment" x="-248" y="-88">updateOff(e)</label><nail x="-184" y="48"/><nail x="-184" y="-64"/></transition><transition><source ref="id11"/><target ref="id11"/><label kind="select" x="-448" y="-88">e : personType</label><label kind="synchronisation" x="-464" y="-16">onBoat[e]?</label><label kind="assignment" x="-424" y="56">updateOn(e)</label><nail x="-392" y="-64"/><nail x="-392" y="48"/></transition></template><system>// Place template instantiations here.

Dad = Person(adultOn,1,10);
Mom = Person(adultOn,3,20);
Police = Person(adultOn,5,5);

Boy1 = Person(childOn,0,0);
Boy2 = Person(childOn,0,0);
Girl1 = Person(childOn,2,0);
Girl2 = Person(childOn,2,0);
Thief = Person(childOn,4,0);

// List one or more processes to be composed into a system.


system Boat,Dad,Mom,Police,Boy1,Boy2,Girl1,Girl2,Thief,Observer;</system></nta>